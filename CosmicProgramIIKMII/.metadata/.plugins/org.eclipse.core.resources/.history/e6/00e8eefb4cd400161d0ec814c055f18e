package green.ui.mainWindow.component;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.SystemColor;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.SpringLayout;

import com.github.lgooddatepicker.components.DatePicker;
import com.github.lgooddatepicker.components.TimePicker;

import green.object.CoincidenceReceiver;
import green.object.Console;
import green.object.Detector;
import green.ui.mainWindow.Tabs;
import green.util.Maths;

@SuppressWarnings("serial")
public class Calculator extends JPanel implements CoincidenceReceiver {
	private DatePicker startDate;
	private TimePicker endTime;
	private DatePicker endDate;
	private TimePicker startTime;
	private JButton btnCalculate;
	private JLabel lblDeclination;
	private JLabel lblAscension;
	private JLabel lblZenith;
	private JLabel lblAzimuth;
	private JButton btnPrevious;
	private JTextField textField;
	private JButton btnNext;
	private JButton btnExport;
	private JButton btnExportAll;
	private SpringLayout springLayout;
	private JRadioButton rdbtnGetCoincidencesFrom_3;
	private JRadioButton rdbtnGetCoincidencesFrom_2;
	private JRadioButton rdbtnGetCoincidencesFrom_1;
	private JRadioButton rdbtnGetCoincidencesFrom;
	private Input panel;
	private JLabel lblChjo;
	private JLabel lblSelectATimeframe;
	private JLabel lblCoincidenceCalculator;

	private ActionListener calculateListener;
	private ActionListener exportListener;
	private ActionListener exportAllListener;
	private ActionListener previousListener;
	private ActionListener nextListener;
	private ActionListener textFieldListenr;

	private ArrayList<HashMap<String, Object>> info;
	private boolean isWaiting = false;
	private int eventNo = 0;
	
	private boolean loading = false;

	public Calculator() {
		setSize(getWidth(), 1000);
		setMinimumSize(new Dimension(350, 1000));
		springLayout = new SpringLayout();
		setLayout(springLayout);

		lblCoincidenceCalculator = new JLabel("Coincidence Calculator");
		lblCoincidenceCalculator.setFont(new Font("Tahoma", Font.PLAIN, 38));
		springLayout.putConstraint(SpringLayout.NORTH, lblCoincidenceCalculator, 10, SpringLayout.NORTH, this);
		springLayout.putConstraint(SpringLayout.WEST, lblCoincidenceCalculator, 10, SpringLayout.WEST, this);
		add(lblCoincidenceCalculator);

		lblChjo = new JLabel("Select a way to enter data");
		lblChjo.setFont(new Font("Tahoma", Font.PLAIN, 18));
		springLayout.putConstraint(SpringLayout.NORTH, lblChjo, 29, SpringLayout.SOUTH, lblCoincidenceCalculator);
		springLayout.putConstraint(SpringLayout.WEST, lblChjo, 0, SpringLayout.WEST, lblCoincidenceCalculator);
		add(lblChjo);

		ButtonGroup modesGroup = new ButtonGroup();
		rdbtnGetCoincidencesFrom = new JRadioButton("Get coincidences from station IDs");
		rdbtnGetCoincidencesFrom.setSelected(true);
		springLayout.putConstraint(SpringLayout.NORTH, rdbtnGetCoincidencesFrom, 9, SpringLayout.SOUTH, lblChjo);
		springLayout.putConstraint(SpringLayout.WEST, rdbtnGetCoincidencesFrom, 10, SpringLayout.WEST, this);
		add(rdbtnGetCoincidencesFrom);

		rdbtnGetCoincidencesFrom_1 = new JRadioButton("Get coincidences from cluster");
		springLayout.putConstraint(SpringLayout.NORTH, rdbtnGetCoincidencesFrom_1, 6, SpringLayout.SOUTH,
				rdbtnGetCoincidencesFrom);
		springLayout.putConstraint(SpringLayout.WEST, rdbtnGetCoincidencesFrom_1, 0, SpringLayout.WEST,
				lblCoincidenceCalculator);
		add(rdbtnGetCoincidencesFrom_1);

		rdbtnGetCoincidencesFrom_2 = new JRadioButton("Get coincidences from coincidence file");
		springLayout.putConstraint(SpringLayout.NORTH, rdbtnGetCoincidencesFrom_2, 6, SpringLayout.SOUTH,
				rdbtnGetCoincidencesFrom_1);
		springLayout.putConstraint(SpringLayout.WEST, rdbtnGetCoincidencesFrom_2, 0, SpringLayout.WEST,
				lblCoincidenceCalculator);
		add(rdbtnGetCoincidencesFrom_2);

		rdbtnGetCoincidencesFrom_3 = new JRadioButton("Get coincidences from all detectors");
		springLayout.putConstraint(SpringLayout.NORTH, rdbtnGetCoincidencesFrom_3, 6, SpringLayout.SOUTH,
				rdbtnGetCoincidencesFrom_2);
		springLayout.putConstraint(SpringLayout.WEST, rdbtnGetCoincidencesFrom_3, 0, SpringLayout.WEST,
				lblCoincidenceCalculator);
		add(rdbtnGetCoincidencesFrom_3);

		lblSelectATimeframe = new JLabel("Select a time frame");
		springLayout.putConstraint(SpringLayout.NORTH, lblSelectATimeframe, 172, SpringLayout.SOUTH,
				rdbtnGetCoincidencesFrom_3);
		springLayout.putConstraint(SpringLayout.WEST, lblSelectATimeframe, 0, SpringLayout.WEST,
				lblCoincidenceCalculator);
		lblSelectATimeframe.setFont(new Font("Tahoma", Font.PLAIN, 18));
		add(lblSelectATimeframe);
		modesGroup.add(rdbtnGetCoincidencesFrom);
		modesGroup.add(rdbtnGetCoincidencesFrom_1);
		modesGroup.add(rdbtnGetCoincidencesFrom_2);
		modesGroup.add(rdbtnGetCoincidencesFrom_3);

		JLabel lblStart = new JLabel("Start");
		springLayout.putConstraint(SpringLayout.NORTH, lblStart, 6, SpringLayout.SOUTH, lblSelectATimeframe);
		springLayout.putConstraint(SpringLayout.WEST, lblStart, 0, SpringLayout.WEST, lblCoincidenceCalculator);
		lblStart.setFont(new Font("Tahoma", Font.PLAIN, 15));
		add(lblStart);

		startDate = new DatePicker();
		springLayout.putConstraint(SpringLayout.NORTH, startDate, 483, SpringLayout.NORTH, this);
		springLayout.putConstraint(SpringLayout.WEST, startDate, 0, SpringLayout.WEST, lblCoincidenceCalculator);
		add(startDate);

		JLabel lblTime = new JLabel("Time");
		springLayout.putConstraint(SpringLayout.NORTH, lblTime, 6, SpringLayout.SOUTH, startDate);
		springLayout.putConstraint(SpringLayout.WEST, lblTime, 0, SpringLayout.WEST, lblCoincidenceCalculator);
		add(lblTime);

		startTime = new TimePicker();
		springLayout.putConstraint(SpringLayout.NORTH, startTime, 6, SpringLayout.SOUTH, lblTime);
		springLayout.putConstraint(SpringLayout.WEST, startTime, 0, SpringLayout.WEST, lblCoincidenceCalculator);
		add(startTime);

		JLabel lblFinish = new JLabel("Finish");
		springLayout.putConstraint(SpringLayout.NORTH, lblFinish, 6, SpringLayout.SOUTH, lblSelectATimeframe);
		lblFinish.setFont(new Font("Tahoma", Font.PLAIN, 15));
		add(lblFinish);

		JLabel lblDate = new JLabel("Date");
		springLayout.putConstraint(SpringLayout.WEST, lblFinish, 0, SpringLayout.WEST, lblDate);
		add(lblDate);

		endDate = new DatePicker();
		springLayout.putConstraint(SpringLayout.WEST, lblDate, 0, SpringLayout.WEST, endDate);
		springLayout.putConstraint(SpringLayout.SOUTH, lblDate, -6, SpringLayout.NORTH, endDate);
		springLayout.putConstraint(SpringLayout.NORTH, endDate, 0, SpringLayout.NORTH, startDate);
		springLayout.putConstraint(SpringLayout.WEST, endDate, 64, SpringLayout.EAST, startDate);
		add(endDate);

		JLabel lblTime_1 = new JLabel("Time");
		springLayout.putConstraint(SpringLayout.NORTH, lblTime_1, 0, SpringLayout.NORTH, lblTime);
		springLayout.putConstraint(SpringLayout.WEST, lblTime_1, 0, SpringLayout.WEST, lblFinish);
		add(lblTime_1);

		endTime = new TimePicker();
		springLayout.putConstraint(SpringLayout.NORTH, endTime, 0, SpringLayout.NORTH, startTime);
		springLayout.putConstraint(SpringLayout.WEST, endTime, 0, SpringLayout.WEST, lblFinish);
		add(endTime);

		JLabel label = new JLabel("Date");
		springLayout.putConstraint(SpringLayout.NORTH, label, 0, SpringLayout.NORTH, lblDate);
		springLayout.putConstraint(SpringLayout.WEST, label, 0, SpringLayout.WEST, lblCoincidenceCalculator);
		add(label);

		panel = new IDInput();
		springLayout.putConstraint(SpringLayout.NORTH, panel, 6, SpringLayout.SOUTH, rdbtnGetCoincidencesFrom_3);
		springLayout.putConstraint(SpringLayout.WEST, panel, 10, SpringLayout.WEST, this);
		springLayout.putConstraint(SpringLayout.SOUTH, panel, 164, SpringLayout.SOUTH, rdbtnGetCoincidencesFrom_3);
		springLayout.putConstraint(SpringLayout.EAST, panel, 0, SpringLayout.EAST, lblCoincidenceCalculator);
		panel.setBackground(SystemColor.controlHighlight);
		add(panel);

		init(false);
		if (getWidth() < 650)
			setVerticalMode();

		addComponentListener(new ComponentListener() {
			@Override
			public void componentResized(ComponentEvent e) {

				if (getWidth() < 650) {
					setVerticalMode();
				} else {
					setWideMode();
				}
				revalidate();
				repaint();
			}

			@Override
			public void componentHidden(ComponentEvent e) {
			}

			@Override
			public void componentMoved(ComponentEvent e) {
			}

			@Override
			public void componentShown(ComponentEvent e) {
			}
		});

	}

	public void init(boolean b) {
		lblCoincidenceCalculator = new JLabel("Coincidence Calculator");
		lblCoincidenceCalculator.setFont(new Font("Tahoma", Font.PLAIN, 38));
		btnCalculate = new JButton("Calculate");
		lblAzimuth = new JLabel("Azimuth");
		lblZenith = new JLabel("Zenith");
		lblAscension = new JLabel("Ascension");
		lblDeclination = new JLabel("Declination");
		btnPrevious = new JButton("Previous");
		textField = new JTextField();
		btnNext = new JButton("     Next     ");
		btnExport = new JButton("Export as CSV");
		btnExportAll = new JButton("Export all as CSV");

		if (b)
			setWideMode();
		else
			setVerticalMode();

		add(btnCalculate);
		add(lblAzimuth);
		add(lblZenith);
		add(lblAscension);
		add(lblDeclination);
		add(btnPrevious);
		add(textField);
		add(btnNext);
		add(btnExport);
		add(btnExportAll);

		constructListeners();
		btnCalculate.addActionListener(calculateListener);
		btnPrevious.addActionListener(previousListener);
		btnNext.addActionListener(nextListener);
		textField.addActionListener(textFieldListenr);
		btnExport.addActionListener(exportListener);
		btnExportAll.addActionListener(exportAllListener);
	}

	public void setWideMode() {
		springLayout.putConstraint(SpringLayout.NORTH, btnCalculate, 0, SpringLayout.NORTH, panel);
		springLayout.putConstraint(SpringLayout.SOUTH, btnCalculate, 0, SpringLayout.SOUTH, btnExport);
		springLayout.putConstraint(SpringLayout.WEST, btnCalculate, 30, SpringLayout.EAST, panel);

		springLayout.putConstraint(SpringLayout.WEST, btnExport, 10, SpringLayout.EAST, btnCalculate);

		springLayout.putConstraint(SpringLayout.WEST, btnNext, 10, SpringLayout.EAST, textField);
		springLayout.putConstraint(SpringLayout.NORTH, btnNext, 0, SpringLayout.NORTH, btnPrevious);
		springLayout.putConstraint(SpringLayout.SOUTH, btnNext, 0, SpringLayout.SOUTH, btnPrevious);
		springLayout.putConstraint(SpringLayout.EAST, btnNext, 90, SpringLayout.WEST, btnNext);

		springLayout.putConstraint(SpringLayout.NORTH, btnExportAll, 0, SpringLayout.NORTH, btnCalculate);
		springLayout.putConstraint(SpringLayout.SOUTH, btnExportAll, 0, SpringLayout.SOUTH, btnCalculate);
		springLayout.putConstraint(SpringLayout.EAST, btnExportAll, 0, SpringLayout.EAST, btnNext);
		springLayout.putConstraint(SpringLayout.WEST, btnExportAll, 10, SpringLayout.EAST, btnExport);

		springLayout.putConstraint(SpringLayout.NORTH, lblAzimuth, 15, SpringLayout.SOUTH, btnCalculate);
		springLayout.putConstraint(SpringLayout.WEST, lblAzimuth, 0, SpringLayout.WEST, btnCalculate);
		springLayout.putConstraint(SpringLayout.SOUTH, lblAzimuth, 30, SpringLayout.SOUTH, btnCalculate);

		springLayout.putConstraint(SpringLayout.NORTH, lblZenith, 10, SpringLayout.SOUTH, lblAzimuth);
		springLayout.putConstraint(SpringLayout.WEST, lblZenith, 0, SpringLayout.WEST, btnCalculate);
		springLayout.putConstraint(SpringLayout.SOUTH, lblZenith, 20, SpringLayout.SOUTH, lblAzimuth);

		springLayout.putConstraint(SpringLayout.NORTH, lblAscension, 10, SpringLayout.SOUTH, lblZenith);
		springLayout.putConstraint(SpringLayout.WEST, lblAscension, 0, SpringLayout.WEST, btnCalculate);
		springLayout.putConstraint(SpringLayout.SOUTH, lblAscension, 20, SpringLayout.SOUTH, lblZenith);

		springLayout.putConstraint(SpringLayout.NORTH, lblDeclination, 10, SpringLayout.SOUTH, lblAscension);
		springLayout.putConstraint(SpringLayout.WEST, lblDeclination, 0, SpringLayout.WEST, btnCalculate);
		springLayout.putConstraint(SpringLayout.SOUTH, lblDeclination, 20, SpringLayout.SOUTH, lblAscension);

		springLayout.putConstraint(SpringLayout.NORTH, btnPrevious, 20, SpringLayout.SOUTH, lblDeclination);
		springLayout.putConstraint(SpringLayout.WEST, btnPrevious, 0, SpringLayout.WEST, btnCalculate);
		springLayout.putConstraint(SpringLayout.SOUTH, btnPrevious, 45, SpringLayout.SOUTH, lblDeclination);

		springLayout.putConstraint(SpringLayout.NORTH, textField, 0, SpringLayout.NORTH, btnPrevious);
		springLayout.putConstraint(SpringLayout.SOUTH, textField, 0, SpringLayout.SOUTH, btnPrevious);
		springLayout.putConstraint(SpringLayout.EAST, textField, 50, SpringLayout.EAST, btnExport);
		springLayout.putConstraint(SpringLayout.WEST, textField, 10, SpringLayout.EAST, btnPrevious);

	}

	public void setVerticalMode() {

		springLayout.putConstraint(SpringLayout.NORTH, btnCalculate, 20, SpringLayout.SOUTH, startTime);
		springLayout.putConstraint(SpringLayout.WEST, btnCalculate, 0, SpringLayout.WEST, startTime);

		springLayout.putConstraint(SpringLayout.WEST, btnExport, 10, SpringLayout.EAST, btnCalculate);
		springLayout.putConstraint(SpringLayout.NORTH, btnExport, 0, SpringLayout.NORTH, btnCalculate);

		springLayout.putConstraint(SpringLayout.WEST, btnExportAll, 10, SpringLayout.EAST, btnExport);
		springLayout.putConstraint(SpringLayout.NORTH, btnExportAll, 0, SpringLayout.NORTH, btnExport);
		springLayout.putConstraint(SpringLayout.SOUTH, btnExportAll, 0, SpringLayout.SOUTH, btnExport);

		springLayout.putConstraint(SpringLayout.NORTH, lblAzimuth, 10, SpringLayout.SOUTH, btnCalculate);
		springLayout.putConstraint(SpringLayout.WEST, lblAzimuth, 0, SpringLayout.WEST, btnCalculate);

		springLayout.putConstraint(SpringLayout.NORTH, lblZenith, 10, SpringLayout.SOUTH, lblAzimuth);
		springLayout.putConstraint(SpringLayout.WEST, lblZenith, 0, SpringLayout.WEST, lblAzimuth);

		springLayout.putConstraint(SpringLayout.NORTH, lblAscension, 10, SpringLayout.SOUTH, lblZenith);
		springLayout.putConstraint(SpringLayout.WEST, lblAscension, 0, SpringLayout.WEST, lblZenith);

		springLayout.putConstraint(SpringLayout.NORTH, lblDeclination, 10, SpringLayout.SOUTH, lblAscension);
		springLayout.putConstraint(SpringLayout.WEST, lblDeclination, 0, SpringLayout.WEST, lblAscension);

		springLayout.putConstraint(SpringLayout.NORTH, btnPrevious, 10, SpringLayout.SOUTH, lblDeclination);
		springLayout.putConstraint(SpringLayout.WEST, btnPrevious, 0, SpringLayout.WEST, lblDeclination);
		springLayout.putConstraint(SpringLayout.SOUTH, btnPrevious, 30, SpringLayout.NORTH, btnPrevious);

		springLayout.putConstraint(SpringLayout.EAST, btnNext, 300, SpringLayout.EAST, btnPrevious);
		springLayout.putConstraint(SpringLayout.WEST, btnNext, 200, SpringLayout.EAST, btnPrevious);
		springLayout.putConstraint(SpringLayout.NORTH, btnNext, 0, SpringLayout.NORTH, textField);

		springLayout.putConstraint(SpringLayout.WEST, textField, 10, SpringLayout.EAST, btnPrevious);
		springLayout.putConstraint(SpringLayout.EAST, textField, -10, SpringLayout.WEST, btnNext);

	}

	public void constructListeners() {
		calculateListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				calculate();
			}
		};

		textFieldListenr = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String f = e.getActionCommand();
				char[] chars = f.toCharArray();
				for (char c : chars) {
					try {
						Integer.parseInt("" + c);
					} catch (Exception ex) {
						f.replace(c, '\u0000');
						textField.setText(f);
					}
				}
				int i = Integer.parseInt(textField.getText());
				if (i > 0 && i < info.size()) {
					eventNo = i;
					loadLabelsFor(eventNo);
				}
			}
		};

		nextListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (eventNo < info.size()) {
					eventNo++;
					loadLabelsFor(eventNo);
				}
			}
		};

		previousListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if (eventNo > 1) {
					eventNo--;
					loadLabelsFor(eventNo);
				}
			}
		};

		exportListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				HashMap<String, Object> m = info.get(eventNo);
				String rawA = (String) m.get("rawA");
				String rawB = (String) m.get("rawB");
				String rawC = (String) m.get("rawC");
				String Ta = (String) m.get("Ta");
				String Tb = (String) m.get("Tb");
				String Tc = (String) m.get("Tc");
				Double[] ACoords = (Double[]) m.get("coordsA");
				Double[] BCoords = (Double[]) m.get("coordsB");
				Double[] CCoords = (Double[]) m.get("coordsC");
				double U = (double) m.get("U");
				double V = (double) m.get("V");
				double R1 = (double) m.get("R1");
				double R2 = (double) m.get("R2");
				double Q1 = (double) m.get("Q1");
				double Q2 = (double) m.get("Q2");
				Console.log(rawA);
				Console.log(rawB);
				Console.log(rawC);
				Console.log("Ta: " + Ta + " Tb: " + Tb + " Tc: " + Tc);
				Console.log("ACoords: " + ACoords + " BCoords: " + BCoords + " CCoords: " + CCoords);
				Console.log("U: " + U + " V: " + V);
				Console.log("R1: " + R1 + " Q1: " + Q1 + "--- R2: " + R2 + " Q2: " + Q2);
				Console.log("Azimuth: " + m.get("azimuth") + " Zenith: " + m.get("zenith"));
			}
		};

		exportAllListener = new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				ArrayList<Double> azs = new ArrayList<Double>();
				StringBuilder b = new StringBuilder();
				if (info != null) {
					for (HashMap<String, Object> bit : info) {
						double azimuth = (double) bit.get("azimuth");
						double zenith = (double) bit.get("zenith");
						if( !Double.isNaN(azimuth) && !Double.isNaN(zenith)){
							azs.add(azimuth);
							b.append(azimuth);
							b.append("\t");
							b.append(zenith);
							b.append("\n");
						}
					}
				}
				
				double total = 0;
				for(double d : azs)
					total += d;
				double average = total / azs.size();
				b.append("\n"+average);
				Console.log(average);
				
				StringSelection selection = new StringSelection(b.toString());
				Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection, selection);
				
				
			}
		};

	}

	public void calculate() {
		isWaiting = true;
		String sd = startDate.getDateStringOrEmptyString();
		String st = startTime.getTimeStringOrEmptyString() + ":00";
		String ed = endDate.getDateStringOrEmptyString();
		String et = endTime.getTimeStringOrEmptyString() + ":00";
		if (sd == "" || st == "" || ed == "" || et == "") {
			Console.log("At least one value was missing!");
			isWaiting = false;
			return;
		}

		String start = sd + "+" + st;
		String end = ed + "+" + et;

		Object obj = panel.getInfo();

		if (panel.getClass().equals(IDInput.class)) {
			isWaiting = true;
			new Thread(new Runnable() {
				@SuppressWarnings("unchecked")
				@Override
				public void run() {
					Maths.getAngles((ArrayList<Detector>) obj, start, end, Tabs.calculator);
				}
			}).start();
		}

	}

	@Override
	public void receiveCoincidences(ArrayList<HashMap<String, Object>> data) {
		Console.log("Received data at calculator!");
		info = data;
		isWaiting = false;
		textField.setText("1");
		eventNo = 1;
		loadLabelsFor(1);
	}

	public void loadLabelsFor(int ffor) {
		HashMap<String, Object> s = info.get(ffor - 1);
		lblAzimuth.setText("Azimuth: " + (double) s.get("azimuth"));
		lblZenith.setText("Zenith: " + (double) s.get("zenith"));
		lblAscension.setText("Ascension: "+(double)s.get("ascension"));
		lblDeclination.setText("Declination: " + (double) s.get("zenith"));
		textField.setText("" + ffor);
	}

	@Override
	public void paint(Graphics g) {
		super.paint(g);
		g.drawString(""+System.currentTimeMillis(), 500, 30);
		if (isWaiting) {
			
		}
	}
}
