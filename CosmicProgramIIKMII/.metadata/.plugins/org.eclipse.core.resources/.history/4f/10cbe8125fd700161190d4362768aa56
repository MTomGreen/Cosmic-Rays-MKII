package green.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import green.event.DetectorLoadedEvent;
import green.event.EventHub;
import green.object.Coincidence;
import green.object.Console;
import green.object.Detector;
import green.thread.GUIThread;
import green.ui.loadingWindow.LoadPanel;

/**
 * @author green Performs the tasks of WebUtils, FileUtils and Config.
 */
public class InfoUtils {

	public static ArrayList<Detector> detectors;
	public static short detectorCount;

	// Web Util Data
	private static String baseURL = "http://data.hisparc.nl/api";
	private static String statusURL = "http://data.hisparc.nl/show/stations_by_country/";

	// FIle data
	private static String baseDir = new File("").getAbsolutePath() + "\\data";
	private static File stationsFile;
	private static File configFile;
	private static String configDir = "\\config.cfg";
	private static File stationsDir = new File(baseDir + "\\stations\\");

	private static HashMap<String, Object> config = new HashMap<String, Object>();

	public static void loadEssentials() {
		loadDetectors();
		Console.log("Loaded essentials!");
	}

	// Loads detectors and their IDs from a file. If the file is not present it
	// will download them.
	// Once loaded, it downloads the same information in a new thread.
	// Downloading takes approximately 160 milliseconds, whereas loading the
	// file takes 4.
	static boolean stationsFileExists = false;

	public static void loadDetectors() {
		stationsFile = new File(baseDir);
		if (!stationsFile.exists()) {
			stationsFile.mkdirs();
			System.err.println("Creating...");
			downloadDetectors();
		}

		if (detectors == null)
			detectors = new ArrayList<Detector>();
		stationsFile = new File(baseDir + "\\stations.dat");
		if (stationsFile.exists())
			stationsFileExists = true;
		ArrayList<String> lines = new ArrayList<String>();
		if (stationsFileExists) {
			try {
				BufferedReader reader = new BufferedReader(new FileReader(stationsFile));
				String line = null;
				while ((line = reader.readLine()) != null) {
					lines.add(line);
				}
				reader.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
			for (String line : lines) {
				String[] parts = line.split("\t");
				Detector d = new Detector(Integer.parseInt(parts[0]), parts[1], Integer.parseInt(parts[0]));
				if (d != null){ // Because of stations like 13401
					detectors.add(d);
				}
			}
		}
//		Console.log("Finished loading basics from file");
//		new Thread(new Runnable() {
//			@Override
//			public void run() {
//				loadExtra();
//				downloadDetectors();
//			}
//		}).start();
	}

	// Grabs a list of detectors from the HiSPARC website and overwrites the
	// current detectors with it.
	static ArrayList<String> statusData;

	private static void downloadDetectors() {
		statusData = new ArrayList<String>();
		String line = null;
		boolean hasInternet = true;
		try {
			URL url = new URL(baseURL + "/stations");
			URLConnection con = url.openConnection();
			BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
			URL statURL = new URL(statusURL);
			URLConnection statCon = statURL.openConnection();
			BufferedReader statReader = new BufferedReader(new InputStreamReader(statCon.getInputStream()));
			String statLine;
			while ((statLine = statReader.readLine()) != null)
				statusData.add(statLine);
			line = br.readLine();
			br.close();
		} catch (Exception e) {
			Console.logError("Failed to connect to the internet! Program will use Cached data if available.");
			hasInternet = false;
			if (!stationsFileExists) {
				Console.logError("Could not load data from cache or the internet! Program will exit.");
				System.exit(1);
			}
		}
		try {
			if (hasInternet) {
				ArrayList<Detector> freshDetectors = new ArrayList<Detector>();
				JsonParser parser = new JsonParser();
				JsonArray array = (JsonArray) parser.parse(line);
				for (int i = 0; i < array.size(); i++) {
					JsonObject object = (JsonObject) array.get(i);
					String name = object.get("name").getAsString();
					int number = object.get("number").getAsInt();
					Detector d = new Detector(number, name, getStatus(number));
					if (d != null)
						freshDetectors.add(d);
				}
				detectors = freshDetectors;
				EventHub.fireEvent(new DetectorLoadedEvent());
				
				try{
					FileWriter writer = new FileWriter(stationsFile.getAbsolutePath()+"/stations.dat");
					for (Detector d : detectors) {
						writer.write(d.getId() + "\t" + d.getName() + "\t" + getStatus(d.getId()) + "\r\n");
					}
					writer.flush();
					writer.close();
				}
				catch(Exception e){e.printStackTrace();};
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		Console.log("Finished downloading detector basics");
	}

	public static int getStatus(int stationID) {
		Iterator<String> iter = statusData.iterator();
		while (iter.hasNext()) {
			String line = iter.next();
			if (line.contains("/show/stations/" + stationID + "/status")) {
				if (line.contains("down"))
					return 0;
				if (line.contains("unknown"))
					return 1;
				if (line.contains("problem"))
					return 2;
				if (line.contains("up"))
					return 3;
			}
			if (!line.contains("statusBall"))
				iter.remove();
		}
		return 0;
	}

	@SuppressWarnings("unchecked")
	public static void loadConfig() {
		configFile = new File(baseDir + configDir);
		try {
			if (configFile.exists()) {
				ObjectInputStream ois = new ObjectInputStream(new FileInputStream(configFile));
				config = (HashMap<String, Object>) ois.readObject();
				ois.close();
			} else
				config = new HashMap<String, Object>();
		} catch (Exception e) {
			e.printStackTrace();
		}
		Console.log("Loaded config");
	}

	public static Object getConfigValueOf(String key, Object defaultValue) {
		if (config == null)
			loadConfig();
		if (config.containsKey(key))
			return config.get(key);
		else {
			config.put(key, defaultValue);
			return defaultValue;
		}
	}

	public static void saveConfig() {
		configFile = new File(baseDir + configDir);
		try {
			ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(configFile));
			out.writeObject(config);
			out.flush();
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void setConfigValue(String key, Object value) {
		config.put(key, value);
	}

	public static String getNameForID(int id) {
		for (Detector d : detectors)
			if (d.getId() == id)
				return d.getName();
		return "Station not found";
	}

	public static Detector getDetectorFromNameOrID(String name, String ID) {
		int id;
		try {
			id = Integer.parseInt(ID);
			return getDetectorForID(id);
		} catch (Exception e) {
			for (Detector d : detectors) {
				if (d.getName().toLowerCase().equals(name.toLowerCase()))
					return d;
			}
			String[] parts = name.split(" ");
			for (Detector d : detectors) {
				for (String piece : parts)
					if (d.getName().contains(piece) && !piece.equals(""))
						return d;
			}
		}
		return null;
	}

	public static Detector getDetectorForID(int id) {
		for (Detector d : detectors)
			if (d.getId() == id)
				return d;
		return null;
	}



	public static ArrayList<Coincidence> getCoincidences(ArrayList<Detector> detectors, String cluster, String start,
			String finish, int minStrikes) {
		String base = "http://data.hisparc.nl/data/network/coincidences/?end=%s&start=%s&stations=%s&n=%s&cluster=%s&download=False";
		String complete = null;
		ArrayList<Coincidence> cons = new ArrayList<Coincidence>();
		if (detectors != null) { // Download data by ID
			StringBuilder stations = new StringBuilder();
			for (Detector d : detectors) {
				stations.append(d.getId());
				stations.append(",");
			}
			stations.replace(stations.length() - 1, stations.length(), "");
			complete = String.format(base, finish, start, stations, minStrikes, "None");
		}

		if (cluster != null) { // Download by cluster

		}

		else { // Download all

		}
		Console.log("Downloading");
		ArrayList<String> dataLines = new ArrayList<String>();
		try {
			URL url = new URL(complete);
			URLConnection con = url.openConnection();
			InputStream input = con.getInputStream();
			BufferedReader reader = new BufferedReader(new InputStreamReader(input));
			String line;
			Console.log("Data downloaded");
			while ((line = reader.readLine()) != null) {
				
				if (!line.contains("#")) {
					dataLines.add(line);
					// Console.log(line);
				}
			}
		} catch (Exception ex) {
			Console.log("Couldn't load coincidence!");
			ex.printStackTrace();
		}
		Console.log("Making coincidences");
		int numEvents = 0;
		if (dataLines.size() >= 1) {
			numEvents = Integer.parseInt(dataLines.get(dataLines.size() - 1).split("\t")[0]);
			// Console.log(numEvents);
		}

		for (int i = 0; i < numEvents + 1; i++) {
			cons.add(new Coincidence(i));
		}

		for (String line : dataLines) {
			String[] parts = line.split("\t");
			int id = Integer.parseInt(parts[0]);
			cons.get(id).rawData.add(line);
		}
		Console.log("Done making coincidences");
		return cons;
	}

	

	/**
	 * Loads position, status(incorrect) and status(incorrect) to the detector.
	 */
	public static void setDetectorInfo(Detector d) {
		String info = null;
		try {
			if (d != null) {
				URL url = new URL(baseURL + "/station/" + d.getId());
				URLConnection con = url.openConnection();
				InputStream input = con.getInputStream();
				InputStreamReader streamReader = new InputStreamReader(input);
				BufferedReader reader = new BufferedReader(streamReader);
				info = reader.readLine();
				input.close();
				streamReader.close();
				reader.close();

				File writeTo = new File(stationsDir + "/" + d.getId() + ".station");
				FileWriter writer = new FileWriter(writeTo);
				writer.write(info);
				writer.flush();
				writer.close();
				Console.log("Downloaded data for station #" + d.getId() );
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		try {
			if (info != null) {
				JsonObject json = new JsonParser().parse(info).getAsJsonObject();
				d.setAltitude(json.get("altitude").getAsDouble());
				d.setLatitude(json.get("latitude").getAsDouble());
				d.setLongitude(json.get("longitude").getAsDouble());
				d.setActive(json.get("active").getAsBoolean());
				d.setCluster(json.get("cluster").getAsString());
				d.setCountry(json.get("country").getAsString());
				d.setSubcluster(json.get("subcluster").getAsString());
			}
			else{
				Console.log("Null.");
			}
		} catch (Exception e) {
		}

	}

	public static void setDetectorInfo(Detector d, String source) {
		try {
			JsonObject json = new JsonParser().parse(source).getAsJsonObject();
			d.setAltitude(json.get("altitude").getAsDouble());
			d.setLatitude(json.get("latitude").getAsDouble());
			d.setLongitude(json.get("longitude").getAsDouble());
			d.setActive(json.get("active").getAsBoolean());
			d.setCluster(json.get("cluster").getAsString());
			d.setCountry(json.get("country").getAsString());
			d.setSubcluster(json.get("subcluster").getAsString());
		} catch (Exception e) {
			Console.logError("The station " + d.getId() + " has invalid data! [FILE]");
			// e.printStackTrace();
		}
	}

	public static void loadExtra() {
		if (!stationsDir.exists()) {
			stationsDir.mkdirs();
			loadExtra();
			return;
		}

		//Console.log(detectors.size());
		int progressMax = detectors.size();
		int progressCount = 0;
		for (Detector d : detectors) {
			File stationFile = new File(stationsDir + "/" + d.getId() + ".station");
			if (stationFile.exists()) {
				try {
					FileReader reader = new FileReader(stationFile);
					BufferedReader br = new BufferedReader(reader);
					setDetectorInfo(d, br.readLine());
					reader.close();
					br.close();
				} catch (Exception ex) {
					Console.logError("Some error occured while loading station data");
					ex.printStackTrace();
				}
			} else {
				setDetectorInfo(d);
				progressCount ++;
			}
			double percentage = ((double)progressCount / (double)progressMax) * 100d;
			//System.out.println(progressCount);
			
			//Null check - when loading from file, load panel is already close by this point
			try{
				LoadPanel.progressBar.setValue((int)percentage);
				GUIThread.loadWindow.repaint();
			}
			catch(Exception e){
				e.printStackTrace();
			}
			//Console.log("Downloaded data for detector #" + d.getId());
		}
		Console.log("Loaded station data");
	}
}
